// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String        @id @default(cuid())
  email            String        @unique
  name             String?
  image            String?
  emailVerified    DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  accounts         Account[]
  sessions         Session[]
  groupMemberships GroupMember[]
  createdGroups    Group[]       @relation("GroupCreator")
  bets             Bet[] // Add this relation
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Group {
  id         String        @id @default(cuid())
  name       String
  creatorId  String
  creator    User          @relation("GroupCreator", fields: [creatorId], references: [id])
  members    GroupMember[]
  milestones Milestone[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model GroupMember {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  user     User     @relation(fields: [userId], references: [id])
  group    Group    @relation(fields: [groupId], references: [id])
  joinedAt DateTime @default(now())

  @@unique([userId, groupId]) // Prevent duplicate memberships
  @@index([userId])
  @@index([groupId])
}

model Milestone {
  id          String    @id @default(cuid())
  name        String
  groupId     String
  group       Group     @relation(fields: [groupId], references: [id])
  bets        Bet[]
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([groupId])
}

model Bet {
  id          String    @id @default(cuid())
  amount      Float
  milestoneId String
  milestone   Milestone @relation(fields: [milestoneId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())

  @@index([milestoneId])
  @@index([userId])
}
